//
// FrontOfficeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FrontOfficeAPI {

    /**
     Gets personalized documents for the user.
     
     - parameter userId: (path) Id of the user 
     - parameter count: (query) Maximum number of personalized documents to return (optional, default to 10)
     - parameter publishedAfter: (query) Only include documents which have been published after given datetime.  If used documents without a &#x60;properties.publication_date&#x60; will be ignored. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonalizedDocuments(userId: String, count: Int? = nil, publishedAfter: Date? = nil, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: PersonalizedDocumentsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonalizedDocumentsWithRequestBuilder(userId: userId, count: count, publishedAfter: publishedAfter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets personalized documents for the user.
     - GET /users/{user_id}/personalized_documents
     - Returns a list of documents personalized for the given `user_id`. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better. Documents that have been interacted with by the user are filtered out from the result. Note that you can request personalized documents for a specific `user_id`, only after that same `user_id` has made enough interactions via our system.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter userId: (path) Id of the user 
     - parameter count: (query) Maximum number of personalized documents to return (optional, default to 10)
     - parameter publishedAfter: (query) Only include documents which have been published after given datetime.  If used documents without a &#x60;properties.publication_date&#x60; will be ignored. (optional)
     - returns: RequestBuilder<PersonalizedDocumentsResponse> 
     */
    open class func getPersonalizedDocumentsWithRequestBuilder(userId: String, count: Int? = nil, publishedAfter: Date? = nil) -> RequestBuilder<PersonalizedDocumentsResponse> {
        var localVariablePath = "/users/{user_id}/personalized_documents"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "published_after": (wrappedValue: publishedAfter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonalizedDocumentsResponse>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns documents similar to the given document.
     
     - parameter documentId: (path) Id of the document 
     - parameter count: (query) Maximum number of semantic similar documents to return (optional, default to 10)
     - parameter minSimilarity: (query) Minimum similarity a document has to have to be included. (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSimilarDocuments(documentId: String, count: Int? = nil, minSimilarity: Float? = nil, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: SemanticSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getSimilarDocumentsWithRequestBuilder(documentId: documentId, count: count, minSimilarity: minSimilarity).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns documents similar to the given document.
     - GET /semantic_search/{document_id}
     - Returns a list of documents that are semantically similar to the one given as input. Each document contains the id, the score and the properties. The score is a value between 0 and 1 where a higher value means that the document is more similar to the one in input
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter documentId: (path) Id of the document 
     - parameter count: (query) Maximum number of semantic similar documents to return (optional, default to 10)
     - parameter minSimilarity: (query) Minimum similarity a document has to have to be included. (optional, default to 0)
     - returns: RequestBuilder<SemanticSearchResponse> 
     */
    open class func getSimilarDocumentsWithRequestBuilder(documentId: String, count: Int? = nil, minSimilarity: Float? = nil) -> RequestBuilder<SemanticSearchResponse> {
        var localVariablePath = "/semantic_search/{document_id}"
        let documentIdPreEscape = "\(APIHelper.mapValueToPathItem(documentId))"
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{document_id}", with: documentIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "min_similarity": (wrappedValue: minSimilarity?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SemanticSearchResponse>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get personalized documents based on a given history.
     
     - parameter statelessPersonalizedDocumentsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStatelessPersonalizedDocuments(statelessPersonalizedDocumentsRequest: StatelessPersonalizedDocumentsRequest, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: StatelessPersonalizedDocumentsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getStatelessPersonalizedDocumentsWithRequestBuilder(statelessPersonalizedDocumentsRequest: statelessPersonalizedDocumentsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get personalized documents based on a given history.
     - POST /personalized_documents
     - Returns a list of personalized documents based on interests derived from a history. In difference to `getPersonalizedDocuments` any user specific parts are based on the inputs only. Documents still need to be ingested beforehand.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter statelessPersonalizedDocumentsRequest: (body)  
     - returns: RequestBuilder<StatelessPersonalizedDocumentsResponse> 
     */
    open class func getStatelessPersonalizedDocumentsWithRequestBuilder(statelessPersonalizedDocumentsRequest: StatelessPersonalizedDocumentsRequest) -> RequestBuilder<StatelessPersonalizedDocumentsResponse> {
        let localVariablePath = "/personalized_documents"
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: statelessPersonalizedDocumentsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StatelessPersonalizedDocumentsResponse>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds an interaction between the user and the document.
     
     - parameter userId: (path) Id of the user 
     - parameter userInteractionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserInteractions(userId: String, userInteractionRequest: UserInteractionRequest, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserInteractionsWithRequestBuilder(userId: userId, userInteractionRequest: userInteractionRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds an interaction between the user and the document.
     - PATCH /users/{user_id}/interactions
     - Use this method to register an interaction between a user and a document. Currently, we only support a `Positive` interaction, which is equivalent to a user who \"likes\" a certain document. For web sites, consider triggering this method whenever a certain document url loads, preferably after the user spent some time on the page, in order to prevent false positives. For apps, consider implementing a \"like\" button, where the on click then triggers this method.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter userId: (path) Id of the user 
     - parameter userInteractionRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInteractionsWithRequestBuilder(userId: String, userInteractionRequest: UserInteractionRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}/interactions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userInteractionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
