//
// FrontOfficeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FrontOfficeAPI {

    /**
     Gets personalized documents for the user.
     
     - parameter userId: (path) Id of the user 
     - parameter count: (query) Maximum number of personalized documents to return (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonalizedDocuments(userId: String, count: Int? = nil, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: PersonalizedDocumentsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonalizedDocumentsWithRequestBuilder(userId: userId, count: count).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets personalized documents for the user.
     - GET /users/{user_id}/personalized_documents
     - Returns a list of documents personalized for the given `user_id`. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better. Note that you can request personalized documents for a specific `user_id`, only after that same `user_id` has made at least one interaction via our system.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter userId: (path) Id of the user 
     - parameter count: (query) Maximum number of personalized documents to return (optional, default to 10)
     - returns: RequestBuilder<PersonalizedDocumentsResponse> 
     */
    open class func getPersonalizedDocumentsWithRequestBuilder(userId: String, count: Int? = nil) -> RequestBuilder<PersonalizedDocumentsResponse> {
        var localVariablePath = "/users/{user_id}/personalized_documents"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PersonalizedDocumentsResponse>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds an interaction between the user and the document.
     
     - parameter userId: (path) Id of the user 
     - parameter userInteractionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateUserInteractions(userId: String, userInteractionRequest: UserInteractionRequest, apiResponseQueue: DispatchQueue = XaynFrontOfficeSdkAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateUserInteractionsWithRequestBuilder(userId: userId, userInteractionRequest: userInteractionRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds an interaction between the user and the document.
     - PATCH /users/{user_id}/interactions
     - Use this method to register an interaction between a user and a document. Currently, we only support a `Positive` interaction, which is equivalent to a user who \"likes\" a certain document. For web sites, consider triggering this method whenever a certain document url loads, preferably after the user spent some time on the page, in order to prevent false positives. For apps, consider implementing a \"like\" button, where the on click then triggers this method.
     - API Key:
       - type: apiKey authorizationToken 
       - name: ApiKeyAuth
     - parameter userId: (path) Id of the user 
     - parameter userInteractionRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateUserInteractionsWithRequestBuilder(userId: String, userInteractionRequest: UserInteractionRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/users/{user_id}/interactions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = XaynFrontOfficeSdkAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userInteractionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = XaynFrontOfficeSdkAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
