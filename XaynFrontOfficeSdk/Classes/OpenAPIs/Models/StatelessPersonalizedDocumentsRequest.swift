//
// StatelessPersonalizedDocumentsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StatelessPersonalizedDocumentsRequest: Codable, JSONEncodable, Hashable {

    static let countRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
    /** The history is an sequence of entries representing documents visited by the user.  It is ordered from the  \"oldest\" interaction at index 0 to the \"newest\" interaction at the highest index.  History entries do not need to have a timestamp, if no timestamp is given it is approximated in some way based on timestamps of neighboring documents and if non have a timestamp they are all assumed to have happened \"just now\" for simplicity. */
    public var history: [HistoryEntry]
    public var count: Int? = 10
    /** A RFC3339 compatible date-time  - can be in the future - will be converted to and then stored as UTC - sub-second resolution is not guaranteed. - while `properties.publication_date` is in the future the document will not be   returned for personalized documents, once it is no longer in the future it will   automatically be considered for personalization from then on  */
    public var publishedAfter: Date?

    public init(history: [HistoryEntry], count: Int? = 10, publishedAfter: Date? = nil) {
        self.history = history
        self.count = count
        self.publishedAfter = publishedAfter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case history
        case count
        case publishedAfter = "published_after"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(history, forKey: .history)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(publishedAfter, forKey: .publishedAfter)
    }
}

